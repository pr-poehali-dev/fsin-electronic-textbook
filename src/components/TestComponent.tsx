import { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";
import Icon from "@/components/ui/icon";

interface Question {
  id: number;
  question: string;
  options: string[];
  correct: number;
}

const questions: Question[] = [
  {
    id: 1,
    question: "–ö–∞–∫–æ–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ—Ä–≥–∞–Ω –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –§–°–ò–ù?",
    options: [
      "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–µ–ª",
      "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —é—Å—Ç–∏—Ü–∏–∏",
      "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã",
      "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –†–§",
    ],
    correct: 1,
  },
  {
    id: 2,
    question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –ò–ö?",
    options: [
      "–ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å",
      "–ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∏—è",
      "–ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–º–∏—Å—Å–∏—è",
      "–ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞",
    ],
    correct: 1,
  },
  {
    id: 3,
    question: "–ö–∞–∫–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–¥–∞—á–∏ —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–∞ –æ–± –£–î–û?",
    options: [
      "–û—Ç–±—ã—Ç–∏–µ 1/2 –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è",
      "–û—Ç–±—ã—Ç–∏–µ 1/3 –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è",
      "–û—Ç–±—ã—Ç–∏–µ 2/3 –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è",
      "–û—Ç–±—ã—Ç–∏–µ 3/4 –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è",
    ],
    correct: 1,
  },
  {
    id: 4,
    question:
      "–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–∏–¥–∞–Ω–∏–π –≤ –≥–æ–¥ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –æ—Å—É–∂–¥–µ–Ω–Ω—ã–π –≤ –ò–ö –æ–±—â–µ–≥–æ —Ä–µ–∂–∏–º–∞?",
    options: [
      "2 –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ 1 –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ",
      "3 –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ 2 –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã—Ö",
      "4 –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ 3 –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã—Ö",
      "6 –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ 4 –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã—Ö",
    ],
    correct: 3,
  },
  {
    id: 5,
    question:
      "–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–∑—ã—Å–∫–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–æ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è?",
    options: [
      "15 —Å—É—Ç–æ–∫ —à—Ç—Ä–∞—Ñ–Ω–æ–≥–æ –∏–∑–æ–ª—è—Ç–æ—Ä–∞",
      "30 —Å—É—Ç–æ–∫ –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –ü–ö–¢",
      "45 —Å—É—Ç–æ–∫ —à—Ç—Ä–∞—Ñ–Ω–æ–≥–æ –∏–∑–æ–ª—è—Ç–æ—Ä–∞",
      "60 —Å—É—Ç–æ–∫ –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –ü–ö–¢",
    ],
    correct: 0,
  },
];

const TestComponent = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [isStarted, setIsStarted] = useState(false);

  const handleAnswerSelect = (questionIndex: number, answerIndex: number) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[questionIndex] = answerIndex;
    setSelectedAnswers(newAnswers);
  };

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResults(true);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const calculateScore = () => {
    return selectedAnswers.reduce((score, answer, index) => {
      return score + (answer === questions[index].correct ? 1 : 0);
    }, 0);
  };

  const resetTest = () => {
    setCurrentQuestion(0);
    setSelectedAnswers([]);
    setShowResults(false);
    setIsStarted(false);
  };

  const progress = ((currentQuestion + 1) / questions.length) * 100;

  if (!isStarted) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="GraduationCap" size={24} />
            –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ –§–°–ò–ù
          </CardTitle>
          <CardDescription>
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <Icon
              name="Play"
              size={48}
              className="mx-auto mb-4 text-blue-500"
            />
            <p className="text-lg mb-4">
              –¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Å–Ω–æ–≤–∞–º –§–°–ò–ù
            </p>
            <p className="text-sm text-gray-600 mb-6">
              –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–∞–Ω–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
            </p>
            <Button
              onClick={() => setIsStarted(true)}
              className="bg-blue-500 hover:bg-blue-600"
            >
              –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (showResults) {
    const score = calculateScore();
    const percentage = (score / questions.length) * 100;

    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="Trophy" size={24} />
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <div className="text-6xl mb-4">
              {percentage >= 80 ? "üéâ" : percentage >= 60 ? "üòä" : "üòî"}
            </div>
            <h3 className="text-2xl font-bold mb-2">
              –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ {questions.length} –±–∞–ª–ª–æ–≤
            </h3>
            <p className="text-lg text-gray-600 mb-6">
              –û—Ü–µ–Ω–∫–∞:{" "}
              {percentage >= 80
                ? "–û—Ç–ª–∏—á–Ω–æ!"
                : percentage >= 60
                  ? "–•–æ—Ä–æ—à–æ!"
                  : "–ù—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∑–Ω–∞–Ω–∏—è"}
            </p>

            <div className="space-y-4 mb-6">
              <h4 className="font-semibold">–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</h4>
              {questions.map((question, index) => (
                <div
                  key={question.id}
                  className="text-left bg-gray-50 p-3 rounded-lg"
                >
                  <p className="font-medium text-sm mb-1">
                    {index + 1}. {question.question}
                  </p>
                  <p className="text-sm text-green-600">
                    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.options[question.correct]}
                  </p>
                  {selectedAnswers[index] !== question.correct && (
                    <p className="text-sm text-red-600">
                      –í–∞—à –æ—Ç–≤–µ—Ç: {question.options[selectedAnswers[index]]}
                    </p>
                  )}
                </div>
              ))}
            </div>

            <Button
              onClick={resetTest}
              className="bg-blue-500 hover:bg-blue-600"
            >
              –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  const question = questions[currentQuestion];

  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-center mb-4">
          <CardTitle className="flex items-center gap-2">
            <Icon name="HelpCircle" size={24} />
            –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
          </CardTitle>
          <Button variant="outline" size="sm" onClick={resetTest}>
            –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
          </Button>
        </div>
        <Progress value={progress} className="mb-4" />
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          <h3 className="text-lg font-medium">{question.question}</h3>

          <RadioGroup
            value={selectedAnswers[currentQuestion]?.toString() || ""}
            onValueChange={(value) =>
              handleAnswerSelect(currentQuestion, parseInt(value))
            }
          >
            {question.options.map((option, index) => (
              <div key={index} className="flex items-center space-x-2">
                <RadioGroupItem
                  value={index.toString()}
                  id={`q${currentQuestion}-${index}`}
                />
                <Label
                  htmlFor={`q${currentQuestion}-${index}`}
                  className="flex-1 cursor-pointer"
                >
                  {option}
                </Label>
              </div>
            ))}
          </RadioGroup>

          <div className="flex justify-between pt-6">
            <Button
              variant="outline"
              onClick={handlePrevious}
              disabled={currentQuestion === 0}
            >
              –ù–∞–∑–∞–¥
            </Button>

            <Button
              onClick={handleNext}
              disabled={selectedAnswers[currentQuestion] === undefined}
              className="bg-blue-500 hover:bg-blue-600"
            >
              {currentQuestion === questions.length - 1 ? "–ó–∞–≤–µ—Ä—à–∏—Ç—å" : "–î–∞–ª–µ–µ"}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default TestComponent;
